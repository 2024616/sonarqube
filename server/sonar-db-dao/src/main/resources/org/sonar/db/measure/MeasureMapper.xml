<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.measure.MeasureMapper">

  <sql id="measureColumns">
    pm.uuid as uuid,
    pm.metric_uuid as metricUuid,
    pm.component_uuid as componentUuid,
    pm.analysis_uuid as analysisUuid,
    pm.value as value,
    pm.text_value as textValue,
    pm.alert_status as alertStatus,
    pm.alert_text as alertText,
    pm.measure_data as dataValue,
    pm.variation_value_1 as variation
  </sql>

  <select id="selectLastMeasure" parameterType="map" resultType="Measure">
    select <include refid="measureColumns"/>
    from project_measures pm
    inner join metrics m on m.uuid = pm.metric_uuid
    inner join snapshots s on s.uuid = pm.analysis_uuid
    where
    pm.component_uuid = #{componentUuid,jdbcType=VARCHAR} and
    m.name = #{metricKey,jdbcType=VARCHAR} and
    s.islast= ${_true}
  </select>


  <select id="selectLastMeasureForAllProjects" parameterType="map" resultType="ProjectMeasure">
    select tie_breaker.projectUuid as projectUuid,
    s.build_date as lastAnalysis,
    ncloc as loc,
    pm.text_value as textValue
      from
        (select counter.projectUuid as projectUuid,
          counter.maxncloc ncloc,
          max(case
            when c.main_branch_project_uuid is null
            then 1
            else 0
          end) as mainBranch,
          min(c.kee) as component_kee,
          counter.projectName,
          counter.projectKey
          from
            (select b.project_uuid as projectUuid,
              p.name as projectName,
              p.kee as projectKey,
              max(lm.value) as maxncloc
                from live_measures lm
                inner join metrics m on m.uuid = lm.metric_uuid
                inner join project_branches b on b.uuid = lm.component_uuid
                inner join projects p on p.uuid = b.project_uuid and p.qualifier = 'TRK'
                where m.name = 'ncloc'
                group by b.project_uuid, p.name, p.kee) counter
          inner join live_measures lmo on lmo.value = counter.maxncloc
          inner join project_branches br on br.project_uuid = counter.projectUuid and br.uuid = lmo.component_uuid
          inner join components c on c.uuid = br.uuid
          group by counter.projectUuid, counter.maxncloc, counter.projectName, counter.projectKey) tie_breaker
      inner join components c2 on c2.kee  = tie_breaker.component_kee
      inner join project_branches pb on c2.uuid = pb.uuid
      inner join project_measures pm on pb.uuid = pm.component_uuid
      inner join snapshots s on s.component_uuid = pb.uuid and s.islast = ${_true}
      inner join metrics m on m.name = #{metricKey,jdbcType=VARCHAR} and m.uuid = pm.metric_uuid
      where pm.analysis_uuid = s.uuid
      order by ncloc desc
  </select>

  <select id="selectMeasure" parameterType="map" resultType="Measure">
    select <include refid="measureColumns"/>
    from project_measures pm
    inner join metrics m on m.uuid = pm.metric_uuid
    inner join snapshots s on s.uuid = pm.analysis_uuid
    where
    pm.component_uuid = #{componentUuid,jdbcType=VARCHAR} and
    m.name = #{metricKey,jdbcType=VARCHAR} and
    s.uuid = #{analysisUuid,jdbcType=VARCHAR}
  </select>

  <sql id="selectByQueryCommonJoins">
    inner join snapshots analysis on analysis.uuid = pm.analysis_uuid
    <if test="query.getMetricKeys() != null">
      inner join metrics m on m.uuid = pm.metric_uuid
    </if>
  </sql>

  <select id="selectPastMeasuresOnSeveralAnalyses" parameterType="map" resultType="Measure">
    select <include refid="measureColumns"/>
    from project_measures pm
    inner join snapshots analysis on analysis.uuid = pm.analysis_uuid
    where
    pm.component_uuid = #{query.componentUuid, jdbcType=VARCHAR}
    <if test="query.from!= null">
      and analysis.created_at>=#{query.from, jdbcType=BIGINT}
    </if>
    <if test="query.to!=null">
      and analysis.created_at&lt;#{query.to, jdbcType=BIGINT}
    </if>
    and pm.metric_uuid in <foreach item="metricUuid" collection="query.metricUuids" open="(" separator="," close=")">#{metricUuid, jdbcType=VARCHAR}</foreach>
    and analysis.status=#{query.status, jdbcType=VARCHAR}
  </select>

  <insert id="insert" parameterType="Measure" useGeneratedKeys="false">
    insert into project_measures (
    uuid,
    value,
    metric_uuid,
    component_uuid,
    analysis_uuid,
    text_value,
    alert_status,
    alert_text,
    variation_value_1,
    measure_data)
    VALUES (
    #{uuid, jdbcType=VARCHAR},
    #{value, jdbcType=DOUBLE},
    #{metricUuid, jdbcType=VARCHAR},
    #{componentUuid, jdbcType=VARCHAR},
    #{analysisUuid, jdbcType=VARCHAR},
    #{textValue, jdbcType=VARCHAR},
    #{alertStatus, jdbcType=VARCHAR},
    #{alertText, jdbcType=VARCHAR},
    #{variation, jdbcType=DOUBLE},
    #{dataValue, jdbcType=BINARY}
    )
  </insert>

</mapper>
