<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.db.project.ProjectExportMapper">

    <select id="selectBranchesForExport" parameterType="string" resultType="org.sonar.db.component.BranchDto">
        select
        pb.uuid,
        pb.project_uuid as "projectUuid",
        pb.kee,
        pb.is_main as "isMain",
        pb.branch_type as "branchType",
        pb.merge_branch_uuid as "mergeBranchUuid"
        from project_branches pb
        where pb.project_uuid=#{projectUuid,jdbcType=VARCHAR} and pb.branch_type = 'BRANCH' and pb.exclude_from_purge = ${_true}
    </select>

    <select id="selectPropertiesForExport" parameterType="string" resultType="ScrapProperty">
        select
        p.prop_key as "key",
        p.is_empty as empty,
        p.text_value as textValue,
        p.clob_value as clobValue,
        p.entity_uuid as entityUuid,
        p.user_uuid as userUuid
        from properties p
        where p.entity_uuid=#{projectUuid,jdbcType=VARCHAR} and p.user_uuid is null
    </select>

    <select id="selectLinksForExport" parameterType="string" resultType="org.sonar.db.component.ProjectLinkDto">
        select
        p.uuid,
        p.project_uuid as "projectUuid",
        p.link_type as "type",
        p.name as name,
        p.href as href,
        p.created_at as "createdAt",
        p.updated_at as "updatedAt"
        from project_links p
        where p.project_uuid=#{projectUuid,jdbcType=VARCHAR}
        order by p.uuid
    </select>

    <select id="selectNewCodePeriodsForExport" parameterType="string" resultType="org.sonar.db.newcodeperiod.NewCodePeriodDto">
    SELECT
        ncp.uuid,
        ncp.project_uuid as projectUuid,
        ncp.branch_uuid as branchUuid,
        ncp.type,
        ncp.value,
        ncp.updated_at as updatedAt,
        ncp.created_at as createdAt
    FROM new_code_periods ncp
    LEFT JOIN project_branches pb on pb.uuid = ncp.branch_uuid
    WHERE ncp.project_uuid=#{projectUuid, jdbcType=VARCHAR} AND
        (ncp.branch_uuid is null OR (pb.branch_type='BRANCH' AND pb.exclude_from_purge=${_true}))
    </select>

    <select id="scrollAdhocRulesForExport"  parameterType="map" resultMap="org.sonar.db.rule.RuleMapper.ruleResultMap" fetchSize="${_scrollFetchSize}"
            resultSetType="FORWARD_ONLY" resultOrdered="true">
    select
        r.uuid as "r_uuid",
        r.plugin_key as "pluginKey",
        r.plugin_config_key as "configKey",
        r.plugin_rule_key as "ruleKey",
        r.plugin_name as "repositoryKey",
        r.name,
        r.status,
        r.rule_type as "type",
        r.scope,
        r.ad_hoc_name as "adHocName",
        r.ad_hoc_description as "adHocDescription",
        r.ad_hoc_severity as "adHocSeverity",
        r.ad_hoc_type as "adHocType",
        r.clean_code_attribute as "cleanCodeAttribute",
        rdi.uuid as "rdi_uuid",
        rdi.rule_uuid as "rdi_ruleUuid",
        rdi.software_quality as "rdi_softwareQuality",
        rdi.severity as "rdi_severity"
    from
      rules r
      left outer join rules_default_impacts rdi on rdi.rule_uuid = r.uuid
      where
        r.status &lt;&gt; 'REMOVED' and r.is_ad_hoc = true
        and exists(
             select i.kee
             from issues i
                      left join components p on p.uuid = i.project_uuid
                      left join project_branches pb on pb.uuid = p.uuid
             where i.rule_uuid = r.uuid
               and pb.project_uuid = #{projectUuid,jdbcType=VARCHAR}
               and pb.branch_type = 'BRANCH'
               and pb.exclude_from_purge = ${_true}
               and i.status &lt;&gt; 'CLOSED')
      order by r.uuid
    </select>
</mapper>
