/*
 * SonarQube
 * Copyright (C) 2009-2022 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.ce.task.projectanalysis.pushevent;

import java.util.LinkedList;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.sonar.api.rules.RuleType;
import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolder;
import org.sonar.ce.task.projectanalysis.component.Component;
import org.sonar.ce.task.projectanalysis.component.TreeRootHolder;
import org.sonar.ce.task.projectanalysis.issue.IssueVisitor;
import org.sonar.core.issue.DefaultIssue;
import org.sonar.db.protobuf.DbCommons;
import org.sonar.db.protobuf.DbIssues;
import org.sonar.server.issue.TaintChecker;

import static java.util.Objects.requireNonNull;
import static java.util.Objects.requireNonNullElse;

public class TaintVulnerabilityVisitor extends IssueVisitor {

  private final PushEventRepository pushEventRepository;
  private final AnalysisMetadataHolder analysisMetadataHolder;
  private final TreeRootHolder treeRootHolder;

  public TaintVulnerabilityVisitor(PushEventRepository pushEventRepository,
    AnalysisMetadataHolder analysisMetadataHolder, TreeRootHolder treeRootHolder) {
    this.pushEventRepository = pushEventRepository;
    this.analysisMetadataHolder = analysisMetadataHolder;
    this.treeRootHolder = treeRootHolder;
  }

  @Override
  public void onIssue(Component component, DefaultIssue issue) {
    if ((issue.isNew() || issue.isCopied()) && isTaintVulnerability(issue)) {
      PushEvent<?> pushEvent = raiseTaintVulnerabilityRaisedEvent(component, issue);
      pushEventRepository.add(pushEvent);
    }
  }

  public PushEvent<TaintVulnerabilityRaised> raiseTaintVulnerabilityRaisedEvent(Component component, DefaultIssue issue) {
    TaintVulnerabilityRaised event = prepareEvent(component, issue);
    return new PushEvent<TaintVulnerabilityRaised>().setName("TaintVulnerabilityRaised").setData(event);
  }

  private TaintVulnerabilityRaised prepareEvent(Component component, DefaultIssue issue) {
    TaintVulnerabilityRaised event = new TaintVulnerabilityRaised();
    event.setProjectKey(issue.projectKey());
    event.setCreationDate(issue.creationDate().getTime());
    event.setKey(issue.key());
    event.setSeverity(issue.severity());
    event.setRuleKey(issue.getRuleKey().toString());
    event.setType(issue.type().name());

    event.setBranch(analysisMetadataHolder.getBranch().getName());

    DbIssues.Locations issueLocations = requireNonNull(issue.getLocations());

    Location mainLocation = new Location();
    mainLocation.setMessage(issue.getMessage());

    mainLocation.setFilePath(component.getName());

    TextRange mainLocationTextRange = getTextRange(issueLocations.getTextRange(), issueLocations.getChecksum());
    mainLocation.setTextRange(mainLocationTextRange);
    event.setMainLocation(mainLocation);

    List<Flow> flows = new LinkedList<>();
    for (DbIssues.Flow sourceFlow : issueLocations.getFlowList()) {
      Flow flow = new Flow();
      List<Location> locations = new LinkedList<>();
      for (DbIssues.Location sourceLocation : sourceFlow.getLocationList()) {
        Location location = new Location();
        var locationComponent = treeRootHolder.getComponentByUuid(sourceLocation.getComponentId());
        location.setFilePath(requireNonNullElse(locationComponent, component).getName());
        location.setMessage(sourceLocation.getMsg());

        TextRange textRange = getTextRange(sourceLocation.getTextRange(), sourceLocation.getChecksum());
        location.setTextRange(textRange);

        locations.add(location);
      }
      flow.setLocations(locations);
      flows.add(flow);
    }
    event.setFlows(flows);
    return event;
  }

  @NotNull
  private static TextRange getTextRange(DbCommons.TextRange source, String checksum) {
    TextRange textRange = new TextRange();
    textRange.setStartLine(source.getStartLine());
    textRange.setStartLineOffset(source.getStartOffset());
    textRange.setEndLine(source.getEndLine());
    textRange.setEndLineOffset(source.getEndOffset());
    textRange.setHash(checksum);
    return textRange;
  }

  private static boolean isTaintVulnerability(DefaultIssue issue) {
    return TaintChecker.getTaintRepositories().contains(issue.getRuleKey().repository())
      && issue.getLocations() != null
      && !RuleType.SECURITY_HOTSPOT.equals(issue.type());
  }
}
